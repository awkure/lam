{-# OPTIONS --cubical #-}

-- TODO :
--  * decidable
--  * monads 
--  * the syntax is horrible 
--  * more expressive error checking
--  * cubical

module Lambda where

open import Agda.Primitive renaming (lsuc to โโ)
open import Data.Bool hiding (_โ_)
open import Data.Nat hiding (erase; _โ_; _โ_)
open import Data.Maybe
open import Data.Sum
open import Relation.Binary.PropositionalEquality hiding ([_])
-- open import Relation.Binary.PropositionalEquality renaming (_โก_ to _โกแต_ ; refl to reflแต ; cong to congแต ; _โข_ to _โขแต_) hiding ([_])
open import Relation.Nullary using (Dec ; yes ; no)
open import Data.String renaming (String to Name ; _โ_ to _โหข_) 
open import Data.List hiding ([_] ; lookup)
open import Data.Unit hiding (_โ_ ; _โค?_)
open import Data.Empty using (โฅ-elim)

open import Cubical.FromStdLib hiding (โฅ-elim)
-- open import Cubical.PathPrelude 
-- open import Cubical.PushOut renaming (P to _โ_ ; inl to injโ ; inr to injโ)

data World : Set where
  observer   : World
  observable : World
  varสท       : Name โ World

-- inj-varสท : โ {nโ nโ} โ (varสท nโ) โก (varสท nโ) โ nโ โก nโ
-- inj-varสท refl = refl 

-- postulate eq-to-path : โ {ฮฑ ฮฒ : Set} โ ฮฑ โกแต ฮฒ โ ฮฑ โก ฮฒ

record Monad {โโ โโ} (m : Set โโ โ Set โโ) : Set (โโ โโ โ โโ) where 
    infixl 1 _>>=_ _>>_
    field 
        return : โ {a} โ a โ m a
        _>>=_ : โ {a b} โ m a โ (a โ m b) โ m b 
        
    _>>_ : โ {a b} โ m a โ m b โ m b
    mโ >> mโ = mโ >>= ฮป _ โ mโ 
    
open Monad {{...}}

instance 
    MonadMaybe : โ {โ} โ Monad {โ} Maybe 
    _>>=_ {{MonadMaybe}} m f = maybe f nothing m
    return {{MonadMaybe}} z = just z
    
_โสท_ : (ฯโ : World) โ (ฯโ : World) โ Maybe (ฯโ โก ฯโ)
observer    โสท observer   = just refl
observable  โสท observable = just refl
(varสท ฯโ)   โสท (varสท ฯโ) with ฯโ โหข ฯโ
...                      | yes p = just (cong varสท p)
...                      | _     = nothing
_           โสท _         = nothing 

โ_โ : โ {โ} {p : Set โ} โ Dec p โ Bool
โ yes _ โ = true
โ no  _ โ = false



data Type : Set where
  ๐แต ๐แต โแต      : Type
  โก โ           : Type โ Type
  _โ_ _รแต_ _โแต_ : Type โ Type  โ Type
  _at_          : Type โ World โ Type

โฆ_โง : Type โ Set
โฆ โแต     โง = โ
โฆ ๐แต     โง = Bool
โฆ ๐แต     โง = โค
โฆ โก ฯ    โง = โฆ ฯ โง
โฆ โ ฯ    โง = โฆ ฯ โง
โฆ ฯ at ฯ โง = โฆ ฯ โง
โฆ ฮฑ โ  ฮฒ โง = โฆ ฮฑ โง โ โฆ ฮฒ โง
โฆ ฮฑ รแต ฮฒ โง = โฆ ฮฑ โง ร โฆ ฮฒ โง
โฆ ฮฑ โแต ฮฒ โง = โฆ ฮฑ โง โ โฆ ฮฒ โง

Context : Set
Context = List (Name ร Type ร World)

data _โ_<_> (n : Name) : Context โ World โ Set where
  inside  : โ {ฮ ฯ ฯ} โ n โ ((n , ฯ , ฯ) โท ฮ) < ฯ >
  outside : โ {ฮ y ฯ ฯโ ฯโ} โ n โ ฮ < ฯโ > โ n โ ((y , ฯ , ฯโ) โท ฮ) < ฯโ >

lookupType : (x : Name) (ฯ : World) (ฮ : Context)  โ x โ ฮ < ฯ > โ Type
lookupType x _ [] ()
lookupType x _ ((_ , ฯ , _) โท ฮ) inside       = ฯ
lookupType x ฯ (_ โท ฮ)           (outside pf) = lookupType x ฯ ฮ pf

skipOne : โ {ฮ x y ฯ ฯโ ฯโ} โ ((x โข y) โ (ฯโ โข ฯโ)) โ x โ ((y , ฯ , ฯโ) โท ฮ) < ฯโ > โ x โ ฮ < ฯโ >
skipOne (injโ xneq) inside      = โฅ-elim (xneq refl)
skipOne (injโ ฯneq) inside      = โฅ-elim (ฯneq refl)
skipOne neq         (outside i) = i

lookup : (x : Name) (ฯ : World) (ฮ : Context)  โ Maybe (x โ ฮ < ฯ >)
lookup x ฯ [] = nothing
lookup x ฯโ ((y , ฯ , ฯโ) โท ฮ) with x โหข y | ฯโ โสท ฯโ  | lookup x ฯโ ฮ
...                            | yes refl  | just refl | _       = just inside 
...                            | yes p     | _         | just a  = just (outside a)
...                            | yes p     | _         | _       = nothing
...                            | _         | _         | just a  = just (outside a)
...                            | _         | _         | _       = nothing

data is_mobile : Type โ Set where
  ๐แตแต   :                                              is ๐แต           mobile
  โแตแต   :                                              is โแต           mobile
  ๐แตแต   :                                              is ๐แต           mobile
  โกแต_   : โ {A   : Type}                             โ is (โก A)        mobile
  โแต_   : โ {A   : Type}                             โ is (โ A)        mobile
  _atแต_ : โ {A   : Type} โ {ฯ : World}               โ is (  A at ฯ  ) mobile
  _รแต_  : โ {A B : Type} โ is A mobile โ is B mobile โ is (  A รแต B  ) mobile
  _โแต_  : โ {A B : Type} โ is A mobile โ is B mobile โ is (  A โแต B  ) mobile

injโกโ : โ {ฯโ ฯโ ฯโ ฯโ : Type} โ ฯโ โ ฯโ โก ฯโ โ ฯโ โ (ฯโ โก ฯโ) ร (ฯโ โก ฯโ)
injโกโ refl = refl , refl

injโกร : โ {ฯโ ฯโ ฯโ ฯโ : Type} โ ฯโ รแต ฯโ โก ฯโ รแต ฯโ โ (ฯโ โก ฯโ) ร (ฯโ โก ฯโ)
injโกร refl = refl , refl

injโกโ : โ {ฯโ ฯโ ฯโ ฯโ : Type} โ ฯโ โแต ฯโ โก ฯโ โแต ฯโ โ (ฯโ โก ฯโ) ร (ฯโ โก ฯโ)
injโกโ refl = refl , refl

injโกโก : โ {ฯ ฯ : Type} โ โก ฯ โก โก ฯ โ ฯ โก ฯ
injโกโก refl = refl

injโกโ : โ {ฯ ฯ : Type} โ โ ฯ โก โ ฯ โ ฯ โก ฯ
injโกโ refl = refl

injโกat : โ {ฯโ ฯโ : Type} {ฯโ ฯโ : World} โ ฯโ at ฯโ โก ฯโ at ฯโ โ (ฯโ โก ฯโ) ร (ฯโ โก ฯโ)
injโกat refl = refl , refl

injรแต : โ {ฯ ฯ : Type} โ is ( ฯ รแต ฯ ) mobile โ is ฯ mobile ร is ฯ mobile
injรแต ( x รแต y ) = x , y

injโแต : โ {ฯ ฯ : Type} โ is ( ฯ โแต ฯ ) mobile โ is ฯ mobile ร is ฯ mobile
injโแต ( x โแต y ) = x , y

โแต : (ฯ : Type) โ Maybe (is ฯ mobile)
โแต โแต         = just โแตแต
โแต ๐แต         = just ๐แตแต
โแต ๐แต         = just ๐แตแต
โแต (โก ฯ)      = just โกแต_
โแต (โ ฯ)      = just โแต_
โแต ( ฯ at ฯ ) = just _atแต_
โแต ( ฯ โ  ฯ ) = nothing 
โแต ( ฯ รแต ฯ ) with โแต ฯ | โแต ฯ
...           | just p  | just q = just ( p รแต q )
...           | _       | _      = nothing 
โแต ( ฯ โแต ฯ ) with โแต ฯ | โแต ฯ
...           | just p  | just q = just ( p โแต q )
...           | _       | _      = nothing

mutual
  binRelโ : (xโ yโ xโ yโ : Type) โ (R : Type โ Type โ Type)
            โ (โ {ฯ ฯโฒ ฯ ฯโฒ} โ R ฯ ฯ โก R ฯโฒ ฯโฒ โ (ฯ โก ฯโฒ) ร (ฯ โก ฯโฒ))
            โ Maybe ((R xโ yโ) โก (R xโ yโ))
  binRelโ xโ yโ xโ yโ R injโกR with xโ โ xโ | yโ โ yโ
  ...                         | just refl  | just refl = just refl
  ...                         | _          | _         = nothing

  unRelโ : (x y : Type) โ (R : Type โ Type) โ (โ {ฯ ฯ} โ R ฯ โก R ฯ โ ฯ โก ฯ) โ Maybe (R x โก R y)
  unRelโ x y R injโกR with x โ y
  ...                | just p = just (cong R p)
  ...                | _      = nothing

  _โ_ : (ฯ ฯ : Type) โ Maybe (ฯ โก ฯ)
  โแต          โ โแต           = just refl
  ๐แต          โ ๐แต           = just refl
  ๐แต          โ ๐แต           = just refl
  โก ฯ         โ โก ฯ          = unRelโ ฯ ฯ โก injโกโก
  โ ฯ         โ โ ฯ          = unRelโ ฯ ฯ โ injโกโ
  ( ฯโ โ  ฯ ) โ ( ฯโ โ  ฯโ ) = binRelโ ฯโ ฯ ฯโ ฯโ _โ_ injโกโ
  ( ฯโ รแต ฯ ) โ ( ฯโ รแต ฯโ ) = binRelโ ฯโ ฯ ฯโ ฯโ _รแต_ injโกร
  ( ฯโ โแต ฯ ) โ ( ฯโ โแต ฯโ ) = binRelโ ฯโ ฯ ฯโ ฯโ _โแต_ injโกโ
  ( x  at ฯ ) โ ( y  at ฯโ ) with x โ y | ฯ โสท ฯโ
  ...                        | just refl | just refl = just refl
  ...                        | _         | _         = nothing 
  _           โ _            = nothing 

data _โข_<_> (ฮ : Context) : Type โ World โ Set where
  `tt : โ {ฯ} 
      --------------
      โ ฮ โข ๐แต < ฯ >
  

  `true : โ {ฯ} 
        --------------
        โ ฮ โข ๐แต < ฯ >
        
  `false : โ {ฯ} 
         --------------
         โ ฮ โข ๐แต < ฯ >
  
  `_โง_ : โ {ฯ} 
       โ ฮ โข ๐แต < ฯ > 
       โ ฮ โข ๐แต < ฯ > 
       --------------
       โ ฮ โข ๐แต < ฯ >
  
  `_โจ_ : โ {ฯ} 
       โ ฮ โข ๐แต < ฯ > 
       โ ฮ โข ๐แต < ฯ > 
       --------------
       โ ฮ โข ๐แต < ฯ >
  
  `ยฌ_ : โ {ฯ} 
      โ ฮ โข ๐แต < ฯ > 
      --------------
      โ ฮ โข ๐แต < ฯ >
  
  โจif_then_else_โฉ : โ {ฯ ฯ} 
                   โ ฮ โข ๐แต < ฯ > 
                   โ ฮ โข  ฯ < ฯ > 
                   โ ฮ โข  ฯ < ฯ > 
                   --------------
                   โ ฮ โข  ฯ < ฯ >
  

  `n_ : โ {ฯ} โ โ 
      --------------
      โ ฮ โข โแต < ฯ >
      
  `_โค_ : โ {ฯ} 
       โ ฮ โข โแต < ฯ > 
       โ ฮ โข โแต < ฯ > 
       ---------------
       โ  ฮ โข ๐แต < ฯ >
       
  `_+_ : โ {ฯ} 
       โ ฮ โข โแต < ฯ > 
       โ ฮ โข โแต < ฯ > 
       --------------
       โ ฮ โข โแต < ฯ >
       
  `_*_ : โ {ฯ} 
       โ ฮ โข โแต < ฯ > 
       โ ฮ โข โแต < ฯ > 
       --------------
       โ ฮ โข โแต < ฯ >
       

  `v : (x : Name) (ฯ : World) (i : x โ ฮ < ฯ >) 
     ------------------------------------------
     โ ฮ โข lookupType x ฯ ฮ i < ฯ >
     
  `_ยท_ : โ {ฯ ฯ ฯ} 
       โ ฮ โข ( ฯ โ ฯ ) < ฯ > 
       โ ฮ โข ฯ < ฯ > 
       ---------------------
       โ ฮ โข ฯ < ฯ >

  โจฮป_๊_โ_โฉ : โ {ฯ ฯ} 
           โ (x : Name) (ฯ : Type) 
           โ ((x , ฯ , ฯ) โท ฮ) โข ฯ < ฯ > 
           -----------------------------
           โ ฮ โข ( ฯ โ ฯ) < ฯ >


  `_,_ : โ {ฯ ฯ ฯ} 
       โ ฮ โข ฯ < ฯ > 
       โ ฮ โข ฯ < ฯ > 
       ----------------------
       โ ฮ โข ( ฯ รแต ฯ ) < ฯ >
       
  `fst : โ {ฯ ฯ ฯ} 
       โ ฮ โข ( ฯ รแต ฯ ) < ฯ > 
       ----------------------
       โ ฮ โข ฯ < ฯ >
       
  `snd : โ {ฯ ฯ ฯ} 
       โ ฮ โข ( ฯ รแต ฯ ) < ฯ > 
       ----------------------
       โ ฮ โข ฯ < ฯ >
       
  โจinl_as_โฉ : โ {ฯ ฯ} 
            โ ฮ โข ฯ < ฯ > โ (ฯ : Type) 
            --------------------------
            โ ฮ โข ( ฯ โแต ฯ ) < ฯ >
            
  โจinr_as_โฉ : โ {ฯ ฯ} 
            โ ฮ โข ฯ < ฯ > โ (ฯ : Type) 
            --------------------------
            โ ฮ โข ( ฯ โแต ฯ ) < ฯ >
            
  โจcase_of_||_โฉ : โ {ฯ ฯ ฯ ฯ} 
                โ ฮ โข ( ฯ โแต ฯ ) < ฯ > 
                โ ฮ โข ( ฯ โ ฯ ) < ฯ > 
                โ ฮ โข ( ฯ โ ฯ ) < ฯ > 
                ----------------------
                โ ฮ โข ฯ < ฯ >
                

  `hold : โ {ฯ ฯ} 
        โ ฮ โข ฯ < ฯ > 
        -----------------------
        โ ฮ โข ( ฯ at ฯ ) < ฯ >

  โจleta_โ_โ_โฉ : โ {ฯ ฯ ฯ ฯโ} 
                โ (x : Name) โ ฮ โข ( ฯ at ฯโ ) < ฯ > 
                โ ((x , ฯ , ฯโ) โท ฮ) โข ฯ < ฯ > 
                -------------------------------------
                โ ฮ โข ฯ < ฯ >


  `box : โ {ฯ ฯ} 
       โ (id : Name) โ ฮ โข ฯ < varสท id > 
       ---------------------------------
       โ ฮ โข (โก ฯ) < ฯ >
       
  `unbox : โ {ฯ ฯ} 
         โ ฮ โข (โก ฯ) < ฯ > 
         ------------------
         โ ฮ โข ฯ < ฯ >
         

  `here : โ {ฯ ฯ} 
        โ ฮ โข ฯ < ฯ > 
        ------------------
        โ ฮ โข (โ ฯ) < ฯ >
        
  โจletd_,_โ_โ_โฉ : โ {ฯ ฯ ฯ} 
                   โ (n : Name) โ (x : Name) 
                   โ ฮ โข (โ ฯ) < ฯ > 
                   โ ((x , ฯ , (varสท n)) โท ฮ) โข ฯ < ฯ > 
                   ------------------------------------
                   โ ฮ โข ฯ < ฯ >


  get : โ {ฯ ฯ ฯโ} 
      โ is ฯ mobile 
      โ ฮ โข ฯ < ฯโ > 
      --------------
      โ ฮ โข ฯ < ฯ >

[_]<_> : Type โ World โ Set
[ ฯ ]< ฯ > = [] โข ฯ < ฯ >

data LDSL : Set where
    ๐แต Trueแต Falseแต     : LDSL
    Varแต                : Name  โ World โ LDSL
    โแต                  : โ     โ LDSL
    _โงแต_ _โจแต_ _โแต_ _รแต_ : LDSL  โ LDSL  โ LDSL
    _โคแต_ _ยทแต_ _,แต_      : LDSL  โ LDSL  โ LDSL
    ยฌแต fstแต sndแต        : LDSL  โ LDSL
    holdแต unboxแต hereแต  : LDSL  โ LDSL
    condแต caseแต         : LDSL  โ LDSL  โ LDSL โ LDSL
    ฮปแต                  : Name  โ Type  โ LDSL โ LDSL
    โกแต                  : Name  โ LDSL  โ LDSL
    inlแต                : LDSL  โ Type  โ LDSL
    inrแต                : LDSL  โ Type  โ LDSL
    letaแต               : Name  โ LDSL  โ LDSL โ LDSL
    letdแต               : Name  โ Name  โ LDSL โ LDSL โ LDSL
    getแต                : World โ LDSL  โ LDSL

erase : โ {ฮ ฯ ฯ} โ ฮ โข ฯ < ฯ > โ LDSL
erase `tt                         = ๐แต
erase `true                       = Trueแต
erase `false                      = Falseแต
erase (`n x                     ) = โแต x
erase (` x โง y                  ) = (erase x) โงแต (erase y)
erase (` x โจ y                  ) = (erase x) โจแต (erase y)
erase (`ยฌ x                     ) = ยฌแต (erase x)
erase โจif c then x else y       โฉ = condแต (erase c) (erase x) (erase y)
erase (` x โค y                  ) = (erase x) โคแต (erase y)
erase (` x + y                  ) = (erase x) โแต (erase y)
erase (` x * y                  ) = (erase x) รแต (erase y)
erase (`v id ฯ i                ) = Varแต id ฯ
erase (` f ยท x                  ) = (erase f) ยทแต (erase x)
erase (โจฮป id ๊ ฯ โ y โฉ          ) = ฮปแต id ฯ (erase y)
erase (` x , y                  ) = (erase x) ,แต (erase y)
erase (`fst p                   ) = fstแต (erase p)
erase (`snd p                   ) = sndแต (erase p)
erase โจinl x as ฯ               โฉ = inlแต (erase x) ฯ
erase โจinr x as ฯ               โฉ = inrแต (erase x) ฯ
erase โจcase x of f || g         โฉ = caseแต (erase x) (erase f) (erase g)
erase (`hold x                  ) = holdแต (erase x)
erase โจleta id โ x โ y          โฉ = letaแต id (erase x) (erase y)
erase (`box ฯ x                 ) = โกแต ฯ (erase x)
erase (`unbox x                 ) = unboxแต (erase x)
erase (`here  x                 ) = hereแต (erase x)
erase โจletd n , id โ x โ y      โฉ = letdแต n id (erase x) (erase y)
erase (get {ฯโ = ฯโ} m x        ) = getแต ฯโ (erase x)

data Infer (ฮ : Context) : LDSL โ Set where
  well : (ฯ : Type) (ฯ : World) (t : ฮ โข ฯ < ฯ >) โ Infer ฮ (erase t)
  ill  : {e : LDSL} โ Infer ฮ e
  
-- instance 
--     MonadInfer : โ {โ} {ฮ : Context} โ Monad {โ} (Infer ฮ)
--     _>>=_ {{MonadInfer}} m (well p) = m p
--     _>>=_ {{MonadInfer}} m ill      = ill
 
infer : (ฯ : World) (ฮ : Context) (e : LDSL) โ Infer ฮ e
infer ฯโ ฮ ๐แต     = well ๐แต ฯโ `tt
infer ฯโ ฮ Trueแต  = well ๐แต ฯโ `true
infer ฯโ ฮ Falseแต = well ๐แต ฯโ `false
infer ฯโ ฮ (โแต x) = well โแต ฯโ (`n x)

infer ฯโ ฮ (Varแต x ฯโ) with ฯโ โสท ฯโ | lookup x ฯโ ฮ
...                   | just refl    | just p = well (lookupType x ฯโ ฮ p) ฯโ (`v x ฯโ p)
...                   | _            | _      = ill

infer ฯโ ฮ (x โงแต y) with infer ฯโ ฮ x | infer ฯโ ฮ y
...                 | well ๐แต  ฯโ t   | well ๐แต  ฯโ u with ฯโ โสท ฯโ | ฯโ โสท ฯโ
...                                                   | just refl   | just refl = well ๐แต ฯโ (` t โง u )
...                                                   | _           | _         = ill
infer ฯโ ฮ (_ โงแต _) | _               | _ = ill

infer ฯโ ฮ (x โจแต y) with infer ฯโ ฮ x | infer ฯโ ฮ y
...                 | well ๐แต ฯโ t    | well ๐แต ฯโ u with ฯโ โสท ฯโ | ฯโ โสท ฯโ
...                                                  | just refl   | just refl = well ๐แต ฯโ (` t โจ u )
...                                                  | _           | _         = ill
infer ฯโ ฮ (_ โจแต _) | _               | _ = ill

infer ฯโ ฮ (x โแต y) with infer ฯโ ฮ x | infer ฯโ ฮ y
...                 | well โแต ฯโ t    | well โแต ฯโ u with ฯโ โสท ฯโ | ฯโ โสท ฯโ
...                                                  | just refl   | just refl = well โแต ฯโ (` t + u )
...                                                  | _           | _         = ill
infer ฯโ ฮ (_ โแต _) | _               | _ = ill

infer ฯโ ฮ (x รแต y) with infer ฯโ ฮ x | infer ฯโ ฮ y
...                 | well โแต ฯโ t    | well โแต ฯโ u with ฯโ โสท ฯโ | ฯโ โสท ฯโ
...                                                  | just refl   | just refl = well โแต ฯโ (` t * u )
...                                                  | _           | _         = ill
infer ฯโ ฮ (_ รแต _) | _               | _ = ill

infer ฯโ ฮ (x โคแต y) with infer ฯโ ฮ x | infer ฯโ ฮ y
...                 | well โแต ฯโ t    | well โแต ฯโ u with ฯโ โสท ฯโ | ฯโ โสท ฯโ
...                                                  | just refl   | just refl = well ๐แต ฯโ (` t โค u )
...                                                  | _           | _         = ill
infer ฯโ ฮ (_ โคแต _) | _               | _ = ill

infer ฯโ ฮ (f ยทแต x) with infer ฯโ ฮ f       | infer ฯโ ฮ x
...                 | well ( ฯโ โ ฯ ) ฯโ t | well ฯโ ฯโ u with ฯโ โ ฯโ | ฯโ โสท ฯโ | ฯโ โสท ฯโ
...                                                       | just refl | just refl | just refl = well ฯ ฯโ (` t ยท u )
...                                                       | _         | _         | _         = ill
infer ฯโ ฮ (_ ยทแต _) | _                     | _ = ill

infer ฯโ ฮ (x ,แต y) with infer ฯโ ฮ x | infer ฯโ ฮ y
...                 | well ฯ ฯโ t     | well ฯ ฯโ u with ฯโ โสท ฯโ | ฯโ โสท ฯโ
...                                                 | just refl   | just refl = well ( ฯ รแต ฯ ) ฯโ (` t , u )
...                                                 | _           | _         = ill
infer ฯโ ฮ (_ ,แต _) | _ | _ = ill

infer ฯโ ฮ (ยฌแต x) with infer ฯโ ฮ x
...               | well ๐แต ฯโ t with ฯโ โสท ฯโ
...                              | just refl = well ๐แต ฯโ (`ยฌ t)
...                              | _         = ill
infer ฯโ ฮ (ยฌแต x) | _ = ill

infer ฯโ ฮ (fstแต p) with infer ฯโ ฮ p
...                 | well ( ฯ รแต ฯ ) ฯโ t with ฯโ โสท ฯโ
...                                        | just refl = well ฯ ฯโ (`fst t)
...                                        | _         = ill
infer ฯโ ฮ (fstแต p) | _ = ill


infer ฯโ ฮ (sndแต p) with infer ฯโ ฮ p
...                 | well ( ฯ รแต ฯ ) ฯโ t with ฯโ โสท ฯโ
...                                        | just refl = well ฯ ฯโ (`snd t)
...                                        | _         = ill
infer ฯโ ฮ (sndแต p) | _ = ill

infer ฯโ ฮ (condแต c x y) with infer ฯโ ฮ c | infer ฯโ ฮ x | infer ฯโ ฮ y
...                      | well ๐แต ฯโ t    | well ฯ ฯโ u  | well ฯโ ฯโ v with ฯ โ ฯโ | ฯโ โสท ฯโ  | ฯโ โสท ฯโ  | ฯโ โสท ฯโ
...                                                                      | just refl | just refl | just refl | just refl = well ฯโ ฯโ โจif t then u else v โฉ
...                                                                      | _         | _         | _         | _         = ill
infer ฯโ ฮ (condแต c x y) | _               | _            | _ = ill

infer ฯโ ฮ (caseแต x f g) with infer ฯโ ฮ x        | infer ฯโ ฮ f           | infer ฯโ ฮ g
...                      | well ( ฯโ โแต ฯโ ) ฯโ t | well ( ฯโ โ ฯโ ) ฯโ u  | well ( ฯโ โ ฯโ ) ฯโ v with ฯโ โ ฯโ | ฯโ โ ฯโ    | ฯโ โ ฯโ    | ฯโ โสท ฯโ   | ฯโ โสท ฯโ  | ฯโ โสท ฯโ
...                                                                                                | just refl  | just refl  | just refl  | just refl  | just refl | just refl = well ฯโ ฯโ โจcase t of u || v โฉ
...                                                                                                | _          | _          | _          | _          | _         | _         = ill
infer ฯโ ฮ (caseแต x f g) | _                      | _                      | _ = ill

infer ฯโ ฮ (ฮปแต id ฯ y) with infer ฯโ ((id , ฯ , ฯโ) โท ฮ) y
...                    | well ฯ ฯโ t with ฯโ โสท ฯโ
...                                  | just refl = well ( ฯ โ ฯ ) ฯโ โจฮป id ๊ ฯ โ t โฉ
...                                  | _         = ill
infer ฯโ ฮ (ฮปแต id ฯ y) | _ = ill

infer ฯโ ฮ (โกแต n e) with infer (varสท n) ฮ e
...                 | well ฯ ฯโ t with ฯโ โสท (varสท n)
...                               | just refl = well (โก ฯ) ฯโ (`box n t)
...                               | _         = ill
infer ฯโ ฮ (โกแต n e) | _ = ill

infer ฯโ ฮ (inlแต e ฯ) with infer ฯโ ฮ e
...                   | well ฯ ฯโ t with ฯโ โสท ฯโ
...                                 | just refl = well ( ฯ โแต ฯ ) ฯโ โจinl t as ฯ โฉ
...                                 | _         = ill
infer ฯโ ฮ (inlแต e ฯ) | _ = ill

infer ฯโ ฮ (inrแต e ฯ) with infer ฯโ ฮ e
...                   | well ฯ ฯโ t with ฯโ โสท ฯโ
...                                 | just refl = well ( ฯ โแต ฯ ) ฯโ โจinr t as ฯ โฉ
...                                 | _         = ill
infer ฯโ ฮ (inrแต e ฯ) | _ = ill

infer ฯโ ฮ (holdแต x) with infer ฯโ ฮ x
...                  | well ฯ ฯโ t with ฯโ โสท ฯโ
...                                | just refl = well ( ฯ at ฯโ ) ฯโ (`hold t)
...                                | _         = ill
infer ฯโ ฮ (holdแต x) | _ = ill

infer ฯโ ฮ (unboxแต x) with infer ฯโ ฮ x
...                   | well (โก ฯ) ฯโ t with ฯโ โสท ฯโ
...                                      | just refl = well ฯ ฯโ (`unbox t)
...                                      | _         = ill
infer ฯโ ฮ (unboxแต x) | _ = ill

infer ฯโ ฮ (hereแต x) with infer ฯโ ฮ x
...                  | well ฯ ฯโ t with ฯโ โสท ฯโ
...                                | just p = well (โ ฯ) ฯโ (`here t)
...                                | _      = ill
infer ฯโ ฮ (hereแต x) | _ = ill

infer ฯโ ฮ (letaแต id x y) with infer ฯโ ฮ x
...                       | well ( ฯ at ฯโ ) ฯโ t with infer ฯโ ((id , ฯ , ฯโ) โท ฮ) y
...                                               | well ฯ ฯโ u with ฯโ โสท ฯโ | ฯโ โสท ฯโ
...                                                             | just refl   | just refl = well ฯ ฯโ โจleta id โ t โ u โฉ 
...                                                             | _           | _         = ill
infer ฯโ ฮ (letaแต id .(erase t) y) | well ( ฯ at ฯโ) ฯโ t | _ = ill
infer ฯโ ฮ (letaแต id x y)          | _ = ill

infer ฯโ ฮ (letdแต n id x y) with infer ฯโ ฮ x
...                         | well (โ ฯ) ฯโ t with infer ฯโ ((id , ฯ , varสท n) โท ฮ ) y
...                                            | well ฯ ฯโ u with ฯโ โสท ฯโ | ฯโ โสท ฯโ
...                                                          | just refl | just refl = well ฯ ฯโ โจletd n , id โ t โ u โฉ
...                                                          | _         | _         = ill
infer ฯโ ฮ (letdแต n id .(erase t) y) | well (โ ฯ) ฯโ t | ill = ill
infer ฯโ ฮ (letdแต n id x y)          | _                     = ill

infer ฯโ ฮ (getแต ฯโ e) with infer ฯโ ฮ e
...                    | well ฯ ฯโ t with ฯโ โสท ฯโ | โแต ฯ
...                                  | just refl   | just m = well ฯ ฯโ (get m t)
...                                  | _           | _      = ill
infer ฯโ ฮ (getแต ฯโ e) | ill = ill

data Env : Context โ Setโ where
  E  : Env  []
  C  : โ {ฮ : Context} {x : Name} {ฯ : Type} {ฯ : World} โ โฆ ฯ โง โ Env ฮ โ Env ((x , ฯ , ฯ) โท ฮ)

lookupEnv : โ {ฮ : Context} {x} {ฯ : World} โ Env ฮ โ (mem : x โ ฮ < ฯ >) โ โฆ lookupType x ฯ ฮ mem โง
lookupEnv E ()
lookupEnv (C ฯแต env) inside =  ฯแต
lookupEnv (C _ env) (outside mem) = lookupEnv env mem

interpret : โ {ฮ : Context} {ฯ : Type} {ฯ : World} โ Env ฮ โ ฮ โข ฯ < ฯ > โ โฆ ฯ โง
interpret env `tt                        = tt
interpret env `true                      = true
interpret env `false                     = false
interpret env (` x โง y                 ) = (interpret env x) โง (interpret env y)
interpret env (` x โจ y                 ) = (interpret env x) โจ (interpret env y)
interpret env (`ยฌ x                    ) = not (interpret env x)
interpret env โจif c then x else y      โฉ = if (interpret env c) then (interpret env x) else (interpret env y)
interpret env โจcase x of f || g        โฉ = [ interpret env f , interpret env g ] (interpret env x)
interpret env (`n x                    ) = x
interpret env (` x โค y                 ) = โ ( interpret env x ) โค? ( interpret env y ) โ
interpret env (` x + y                 ) = (interpret env x) + (interpret env y)
interpret env (` x * y                 ) = (interpret env x) * (interpret env y)
interpret env (`v x ฯ i                ) = lookupEnv env i
interpret env (` f ยท x                 ) = (interpret env f) (interpret env x)
interpret env โจฮป _ ๊ ฯ โ ฯ             โฉ = ฮป (x : โฆ ฯ โง) โ interpret (C x env) ฯ
interpret env (` x , y                 ) = interpret env x , interpret env y
interpret env (`fst p                  ) = fst (interpret env p)
interpret env (`snd p                  ) = snd (interpret env p)
interpret env โจinl x as _              โฉ = injโ (interpret env x)
interpret env โจinr y as _              โฉ = injโ (interpret env y)
interpret env (`hold x                 ) = interpret env x
interpret env (get _ y                 ) = interpret env y
interpret env (`unbox x                ) = interpret env x
interpret env (`box id x               ) = interpret env x
interpret env (`here x                 ) = interpret env x
interpret env โจleta _     โ x โ y      โฉ = let val = interpret env x in interpret (C val env) y
interpret env โจletd _ , _ โ x โ y      โฉ = let val = interpret env x in interpret (C val env) y

โฆ_โฆ : โ {ฯ ฯ} โ [ ฯ ]< ฯ > โ โฆ ฯ โง
โฆ x โฆ = interpret E x

module _ {ฯ ฮฑ ฮฒ : Type} where 
    ฯ = observer

    2+2 : [ โแต ]< ฯ >
    2+2 = ` โจฮป "x" ๊ โแต โ (` (`v "x" ฯ inside) + (`v "x" ฯ inside)) โฉ ยท `n 2

    2+2โก4 : โฆ 2+2 โฆ โก 4
    2+2โก4 = refl

    expr+double : LDSL
    expr+double = ฮปแต "x" โแต ((Varแต "x" ฯ) โแต (Varแต "x" ฯ))

    term+double : [ โแต โ โแต ]< ฯ >
    term+double = โจฮป "x" ๊ โแต โ (` (`v "x" ฯ inside) + (`v "x" ฯ inside)) โฉ

    infer+double : infer ฯ [] expr+double โก well ( โแต โ โแต) ฯ term+double
    infer+double = refl

    nat-ex : [ โแต โ โก โแต ]< ฯ >
    nat-ex = โจฮป "x" ๊ โแต โ `box "ฯ" (get โแตแต (`v "x" ฯ inside)) โฉ

    nat-ex-erase-infer : infer ฯ [] (erase nat-ex) โก well ( โแต โ โก โแต) ฯ nat-ex
    nat-ex-erase-infer = refl

    eโ : [ โก ฯ โ ฯ ]< ฯ >
    eโ = โจฮป "x" ๊ _ โ `unbox (`v "x" ฯ inside) โฉ

    eโ : [ ฯ โ โ ฯ ]< ฯ >
    eโ = โจฮป "x" ๊ _ โ `here (`v "x" ฯ inside) โฉ

    eโ : [ โ (โ ฯ) โ โ ฯ ]< ฯ >
    eโ = โจฮป "x" ๊ _ โ โจletd "ฯ" , "y" โ `v "x" ฯ inside โ get โแต_ (`v "y" (varสท "ฯ") inside) โฉ โฉ

    eโ : [ โ (โก ฯ) โ โก ฯ ]< ฯ >
    eโ = โจฮป "x" ๊ _ โ โจletd "ฯ" , "y" โ `v "x" ฯ inside โ get โกแต_ (`v "y" (varสท "ฯ") inside) โฉ โฉ

    eโ : [ โก ฯ โ โก (โก ฯ) ]< ฯ >
    eโ = โจฮป "x" ๊ _ โ `box "ฯ" (get โกแต_ (`v "x" ฯ inside)) โฉ

    eโ : [ โ ฯ โ โก (โ ฯ) ]< ฯ >
    eโ = โจฮป "x" ๊ _ โ `box "ฯ" (get โแต_ (`v "x" ฯ inside)) โฉ

    eโ : [ โก ( ฮฑ โ ฮฒ) โ ( โ ฮฑ โ โ ฮฒ) ]< ฯ >
    eโ = โจฮป "f" ๊ _ โ โจฮป "x" ๊ _ โ
            โจletd "ฯ" , "y" โ `v "x" ฯ inside โ get โแต_ (`here (` 
                `unbox (get โกแต_ (`v "f" ฯ (outside (outside inside)))) ยท `v "y" (varสท "ฯ") inside)) โฉ โฉ โฉ
